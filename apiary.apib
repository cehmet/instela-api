FORMAT: 1A
HOST: https://instela.com/api/v2

# Instela API
Instela API makes accessible *almost* every method used in Instela web site.

### Authentication

All the read-only endpoints can be accessed without authentication. But to make modification on the resources, an OAuth 2.0 access token should be provided.

### Return codes

All the methods returns appropiate HTTP return codes according to the result. Please check generic HTTP Status Codes at: https://github.com/thehivecluster/instela-api/blob/master/status-codes.md

### HTTP caching

We strongly believe that especially in the mobile era it is extremely important to use bandwidth effeciently. Due to its nature, the most of API results of instela is not frequently refreshed. In order to take the advantage of HTTP caching, thus, in every response we send an ***Etag*** header based on the content to be returned. If ***If-None-Match*** request header including a previously taken ***Etag*** value exists in the response header we return only ***HTTP 304 Not Modified*** status code without any content.

Many popular mobile REST frameworks like [RestKit](https://github.com/RestKit/RestKit) on iOS supports HTTP caching out of the box. We strongly encourage our users to activate this support to save bandwidth for both parties.

### Usage limits

Currently we do not apply any types of limits to this API's usage.

# Group Entries
By **Entries API** you can access entries individually or by title, their votes, favourites. Also using these endpoint you can modify and delete entries and its related objects like votes and favourites.

## Entries Collection [/entries{?t}{?page}{?mode}{?order}]
### List all entries [GET]

+ Parameters
    + t (string,`wondrous`) ... Title
    + page (numeric, optional, `1`) ... Page
    + mode (string, optional) ... Visualization mode
             
        + Values
            + `today`
            + `yesterday`
            + `only_friends`
                  
    + order (string, optional) ... Order mode
            
        + Values
            + `newest` 
            + `best`
    
+ Response 200 (application/json)

### Create an Entry [POST]
+ Request (application/x-www-form-urlencode)

        t=example_title&entry=example_entry

+ Response 201 (application/json)

        

## Entry [/entries/{id}]
A single Entry object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Entry to perform action with.

### Retrieve an Entry [GET]
+ Response 200 (application/json)


### Remove an Entry [DELETE]
+ Response 204

### Update an Entry [PUT]
+ Request (application/x-www-form-urlencode)
        
+ Response 204

## Votes [/entries/{id}/votes]
**Votes API** endpoint can be used for listing (if the authenticated user is authorized to see), voting and undoing votes of an Entry.

### List all votes [GET]
+ Response 200 (application/json)

### Give a vote to the entry [POST]

+ Request (application/x-www-form-urlencode)

        vote=1|-1

+ Response 201 (application/json)

### Undo a vote given to the entry [DELETE]

+ Response 204 (application/json)


## Favourites [/entries/{id}/favourites]
By **Favourites API** you can see how has a specific entry on his/her favourite list, add that entry to the authenticated user's favourite list or remove it from the list.

### List all users [GET]
+ Response 200 (application/json)

### Add to favourite list [POST]

+ Request (application/x-www-form-urlencode)

+ Response 201 (application/json)

### Remove from favourite list [DELETE]

+ Response 204 (application/json)


# Group Users
By **Users API** you can access user details and operate on them.

## Users [/user/{id}{?u}]
A single User object with all its details

+ Parameters
    + id (optional, number, `1`) ... Numeric `id` of the User to perform action with.
    + u (optional, string, `wondrous`) ... `Username` of the User to perform action with.

### Retrieve an User [GET]
+ Response 200 (application/json)

       

